import random
import re
from PyQt5 import QtWidgets, QtCore, QtGui
from constants import TEMPLATES
from utils import parse_price_lines, format_line, sum_ruble_digits, normalize_comment, resource_path


class MainTab(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.init_ui()

    def init_ui(self):
        layout = QtWidgets.QVBoxLayout(self)

        # --- –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ ---
        self.template_box = QtWidgets.QComboBox()
        self.template_box.addItems(list(TEMPLATES.keys()))
        self.template_box.currentTextChanged.connect(self.on_template_change)
        layout.addWidget(QtWidgets.QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:"))
        layout.addWidget(self.template_box)

        # --- –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ ---
        self.common_container = QtWidgets.QWidget()
        common_layout = QtWidgets.QVBoxLayout(self.common_container)
        common_layout.addWidget(QtWidgets.QLabel("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:"))
        self.order_input = QtWidgets.QLineEdit()
        self.order_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞...")
        common_layout.addWidget(self.order_input)

        common_layout.addWidget(QtWidgets.QLabel("–î–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:"))
        self.price_input = QtWidgets.QPlainTextEdit()
        self.price_input.setPlaceholderText(
            "–í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –∑–¥–µ—Å—å...\n–ü—Ä–∏–º–µ—Ä:\n–ü–æ–¥–∞—á–∞\n100 ‚ÇΩ (–∑–∞ 5 –º–∏–Ω)\n–í—Ä–µ–º—è –≤ –ø—É—Ç–∏\n200 ‚ÇΩ (–∑–∞ 15 –º–∏–Ω)"
        )
        common_layout.addWidget(self.price_input)

        # --- –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º—É–ª—å—Ç–∏–∑–∞–∫–∞–∑–∞ ---
        self.multi_container = QtWidgets.QWidget()
        multi_layout = QtWidgets.QVBoxLayout(self.multi_container)
        multi_layout.addWidget(QtWidgets.QLabel("–î–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—á—ë—Ç–µ:"))
        self.multi_calc = QtWidgets.QPlainTextEdit()
        self.multi_calc.setPlaceholderText(
            "–í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–∞:\n–†–∞—Å—á—ë—Ç–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ\n14.99 –∫–º.\n–†–∞—Å—á—ë—Ç–Ω–æ–µ –≤—Ä–µ–º—è\n43 –º–∏–Ω. 4 —Å–µ–∫."
        )
        multi_layout.addWidget(self.multi_calc)

        self.multi_done = QtWidgets.QLineEdit()
        self.multi_done.setPlaceholderText("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –≤—Ä—É—á–µ–Ω–∏–π")
        multi_layout.addWidget(self.multi_done)

        self.multi_total = QtWidgets.QLineEdit()
        self.multi_total.setPlaceholderText("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä—É—á–µ–Ω–∏–π")
        multi_layout.addWidget(self.multi_total)

        # –í init_ui –¥–æ–±–∞–≤—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–∞—Å—Ç—è–º–∏
        self.payment_container = QtWidgets.QWidget()
        payment_layout = QtWidgets.QVBoxLayout(self.payment_container)

        payment_layout.addWidget(QtWidgets.QLabel("–ü–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:"))
        self.payment1_input = QtWidgets.QPlainTextEdit()
        self.payment1_input.setPlaceholderText("26.09.2025, 21:19:41\n148 ‚ÇΩ")
        self.payment1_input.setMaximumHeight(100)
        payment_layout.addWidget(self.payment1_input)

        payment_layout.addWidget(QtWidgets.QLabel("–í—Ç–æ—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:"))
        self.payment2_input = QtWidgets.QPlainTextEdit()
        self.payment2_input.setPlaceholderText("26.09.2025, 21:34:33\n209 ‚ÇΩ")
        self.payment2_input.setMaximumHeight(100)
        payment_layout.addWidget(self.payment2_input)

        # --- —Å—Ç–µ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ---
        self.stack = QtWidgets.QStackedWidget()
        self.stack.addWidget(self.common_container)
        self.stack.addWidget(self.multi_container)
        self.stack.addWidget(self.payment_container)
        layout.addWidget(self.stack)

        # --- –∫–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
        self.generate_btn = QtWidgets.QPushButton("üîÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")
        self.generate_btn.clicked.connect(self.generate_result)
        layout.addWidget(self.generate_btn)

        # --- –ø–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
        layout.addWidget(QtWidgets.QLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç:"))
        self.output = QtWidgets.QPlainTextEdit()
        self.output.setReadOnly(True)
        layout.addWidget(self.output)

        # --- Label –¥–ª—è GIF –ø–æ–≤–µ—Ä—Ö –ø–æ–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
        self.gif_label = QtWidgets.QLabel(self.output)
        self.gif_label.setAlignment(QtCore.Qt.AlignCenter)
        self.gif_label.setStyleSheet("background: rgba(0,0,0,0);")
        self.gif_label.hide()

        # --- –∫–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ---
        self.copy_btn = QtWidgets.QPushButton("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        self.copy_btn.clicked.connect(self.copy_result)
        layout.addWidget(self.copy_btn)

        # --- —Å–ø–∏—Å–æ–∫ GIF ---
        self.gif_list = [
            resource_path("gifs/–∞–≥–∞.gif"),
            resource_path("gifs/–∫—Ä—ã—Å–∫–∞.gif"),
            resource_path("gifs/—ç–∫–æ–Ω–æ–º–∏–∫–∞.gif"),
            resource_path("gifs/–°—Å—ã—Ç.gif")
        ]

        # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å
        self.on_template_change(self.template_box.currentText())

    def on_template_change(self, template_name):
        if "–û—Ç–º–µ–Ω–∞ –±–∞—Ç—á–∞" in template_name:
            self.stack.setCurrentWidget(self.multi_container)
        elif "–û–ø–ª–∞—Ç–∞ —á–∞—Å—Ç—è–º–∏" in template_name:
            self.stack.setCurrentWidget(self.payment_container)
        else:
            self.stack.setCurrentWidget(self.common_container)

    def generate_result(self):
        try:
            template_name = self.template_box.currentText()
            template_text = TEMPLATES[template_name]

            if "–û—Ç–º–µ–Ω–∞ –±–∞—Ç—á–∞" in template_name:
                calc_text = self.multi_calc.toPlainText()
                done = self.multi_done.text().strip()
                total = self.multi_total.text().strip()

                dist_match = re.search(r"–†–∞—Å—á[–µ—ë]—Ç–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ\s*[:\-]?\s*[\r\n]*\s*([\d.,]+)\s*(–∫–º|–º)\b",
                                       calc_text, re.IGNORECASE)
                distance = f"{dist_match.group(1)} {dist_match.group(2)}" if dist_match else "‚Äî"

                time_match = re.search(r"–†–∞—Å—á[–µ—ë]—Ç–Ω–æ–µ –≤—Ä–µ–º—è\s*[:\-]?\s*[\r\n]*\s*(.+)", calc_text, re.IGNORECASE)
                time_raw = time_match.group(1).strip() if time_match else ""
                time_parsed = self.parse_time_to_minutes(time_raw)
                time_parsed = normalize_comment(time_parsed)

                try:
                    done_int = int(done)
                except Exception:
                    done_int = 0
                try:
                    total_int = int(total)
                except Exception:
                    total_int = 0

                def plural_word(n):
                    if 11 <= n % 100 <= 19:
                        return "–≤—Ä—É—á–µ–Ω–∏–π"
                    if n % 10 == 1:
                        return "–≤—Ä—É—á–µ–Ω–∏–µ"
                    if n % 10 in (2, 3, 4):
                        return "–≤—Ä—É—á–µ–Ω–∏—è"
                    return "–≤—Ä—É—á–µ–Ω–∏–π"

                done_word = plural_word(done_int)
                diff = total_int - done_int
                if diff == 1:
                    cancel_text = "–û–¥–Ω–æ –∏–∑ –≤—Ä—É—á–µ–Ω–∏–π –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ, –ø–æ—ç—Ç–æ–º—É –æ–Ω–æ –Ω–µ –≤–æ—à–ª–æ –≤ —Ä–∞—Å—á—ë—Ç, –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å."
                elif diff > 1:
                    cancel_text = "–ù–µ—Å–∫–æ–ª—å–∫–æ –≤—Ä—É—á–µ–Ω–∏–π –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã, –ø–æ—ç—Ç–æ–º—É –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ —É—á—Ç–µ–Ω—ã –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ, –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å."
                else:
                    cancel_text = "–í—Å–µ –≤—Ä—É—á–µ–Ω–∏—è –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"

                result = template_text.format(
                    distance=distance,
                    time=time_parsed,
                    done_count=done_int,
                    done_word=done_word,
                    total_count=total_int,
                    cancel_text=cancel_text
                )
                self.output.setPlainText(result)
                return
            elif "–û–ø–ª–∞—Ç–∞ —á–∞—Å—Ç—è–º–∏" in template_name:
                # –ù–æ–≤—ã–π 4-–π —à–∞–±–ª–æ–Ω
                from datetime import datetime
                MONTHS_RU = {1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
                             5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
                             9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"}

                def parse_payment_block(text):
                    lines = [l.strip() for l in text.strip().splitlines() if l.strip()]
                    if len(lines) < 2:
                        raise ValueError("–ù—É–∂–Ω–æ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏: –¥–∞—Ç–∞/—Å—É–º–º–∞")
                    dt = datetime.strptime(lines[0], '%d.%m.%Y, %H:%M:%S')
                    formatted_date = f"{dt.day} {MONTHS_RU[dt.month]} –≤ {dt.hour:02d}:{dt.minute:02d}"
                    amount = lines[1]
                    return formatted_date, amount

                datetime1, amount1 = parse_payment_block(self.payment1_input.toPlainText())
                datetime2, amount2 = parse_payment_block(self.payment2_input.toPlainText())

                result = template_text.format(
                    amount1=amount1,
                    amount2=amount2,
                    datetime1=datetime1,
                    datetime2=datetime2
                )

                self.output.setPlainText(result)
                return

            # --- –æ–±—ã—á–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã ---
            order_number = self.order_input.text().strip()
            prices = parse_price_lines(self.price_input.toPlainText())
            used_keys = set()
            body_lines = []

            ordered_fields = [
                ("–ü–æ–¥–∞—á–∞", "–ü–æ–¥–∞—á–∞"),
                ("–í—Ä–µ–º—è –≤ –ø—É—Ç–∏", "–í—Ä–µ–º—è –≤ –ø—É—Ç–∏"),
                ("–ö–∏–ª–æ–º–µ—Ç—Ä—ã –≤ –ø—É—Ç–∏", "–ö–∏–ª–æ–º–µ—Ç—Ä—ã –≤ –ø—É—Ç–∏"),
                ("–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Å–ø—Ä–æ—Å", "–ü–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç"),
                ("–û–∂–∏–¥–∞–Ω–∏–µ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è", "–û–∂–∏–¥–∞–Ω–∏–µ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"),
                ("–û–∂–∏–¥–∞–Ω–∏–µ —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è", "–û–∂–∏–¥–∞–Ω–∏–µ —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è"),
                ("–î–æ–ø–ª–∞—Ç—ã", "–ë–æ–Ω—É—Å –∑–∞ –∑–∞–∫–∞–∑"),
                ("–¶–µ–Ω–∞ –æ—Ç–º–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞–º–∏", "–¶–µ–Ω–∞ –æ—Ç–º–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞–º–∏"),
                ("–ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä", "–ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä")
            ]

            extra_fields = [
                "–ü–æ–ª—É—á–µ–Ω–∏–µ",
                "–î–∏—Å—Ç–∞–Ω—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞",
                "–¶–µ–Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–∞—á–∏",
                "–í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞",
                "–£—Å–ª—É–≥–∏ 1 –≥—Ä—É–∑—á–∏–∫–∞ (–∫—É–∑–æ–≤ S)",
                "–£—Å–ª—É–≥–∏ 1 –≥—Ä—É–∑—á–∏–∫–∞ (–∫—É–∑–æ–≤ L)",
                "–£—Å–ª—É–≥–∏ 2 –≥—Ä—É–∑—á–∏–∫–æ–≤ (–∫—É–∑–æ–≤ XL)",
                "–£—Å–ª—É–≥–∏ 1 –≥—Ä—É–∑—á–∏–∫–∞ (–∫—É–∑–æ–≤ M)",
                "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–≥",
                "–ü–µ—Ä–µ–≤–µ—Å –±–æ–ª–µ–µ 20 –∫–≥",
                "–ü–µ—Ä–µ–≤–µ—Å –¥–æ 10 –∫–≥",
                "–ü–µ—Ä–µ–≤–µ—Å 10‚Äì20 –∫–≥",
                "–î–µ–≤—è—Ç—å –∫–æ—Ä–æ–±–æ–∫",
                "–£—Å–ø–µ—à–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –ø–æ—Å—ã–ª–∫–∏",
                "–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–∞—Ä–∫–æ–≤–∫–∏ (30 –º–∏–Ω—É—Ç)",
                "–¶–µ–Ω–∞ –æ—Ç–º–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞–º–∏", "–£—Å–ø–µ—à–Ω–æ–µ –≤—Ä—É—á–µ–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏",
                "–í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã"
            ]

            for key, display in ordered_fields:
                for k in prices:
                    if k.startswith(key) and k not in used_keys:
                        val, comment = prices[k]
                        body_lines.append(format_line(display, val, comment))
                        used_keys.add(k)

            for key in extra_fields:
                for k in prices:
                    if k == key and k not in used_keys:
                        val, comment = prices[k]
                        display_name = "–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –æ—Ç–º–µ–Ω—ã" if key == "–¶–µ–Ω–∞ –æ—Ç–º–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞–º–∏" else key
                        body_lines.append(format_line(display_name, val, comment))
                        used_keys.add(k)

            additional_services_map = {
                "–û—Ç –¥–≤–µ—Ä–∏ –¥–æ –¥–≤–µ—Ä–∏": "–û—Ç –¥–≤–µ—Ä–∏ –¥–æ –¥–≤–µ—Ä–∏",
                "–ö—É–∑–æ–≤": "–†–∞–∑–º–µ—Ä –∫—É–∑–æ–≤–∞",
                "–ì—Ä—É–∑—á–∏–∫–∏": "–ì—Ä—É–∑—á–∏–∫–∏",
                "–¢–µ—Ä–º–æ–∫–æ—Ä–æ–±": "–¢–µ—Ä–º–æ–∫–æ—Ä–æ–±",
                "–¢—è–∂—ë–ª–∞—è –ø–æ—Å—ã–ª–∫–∞": "–¢—è–∂—ë–ª–∞—è –ø–æ—Å—ã–ª–∫–∞",
            }

            for key, (val, comment) in prices.items():
                if "–ö—É–∑–æ–≤" in key:
                    name = '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ ¬´–†–∞–∑–º–µ—Ä –∫—É–∑–æ–≤–∞¬ª'
                    body_lines.append(format_line(name, val, comment))
                    used_keys.add(key)
                    continue
                for k in additional_services_map:
                    if k.lower() != "–∫—É–∑–æ–≤" and k.lower() in key.lower():
                        name = f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ ¬´{additional_services_map[k]}¬ª'
                        body_lines.append(format_line(name, val, comment))
                        used_keys.add(key)
                        break

            body_text = "\n".join(body_lines)
            temp_result = template_text.format(
                order_number=order_number,
                body=body_text,
                total="TEMP_TOTAL"
            )
            calculated_total = sum_ruble_digits(temp_result)
            result = temp_result.replace("TEMP_TOTAL", calculated_total)
            self.output.setPlainText(result)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:\n{str(e)}")

    def parse_time_to_minutes(self, text):
        h = re.search(r"(\d+)\s*—á", text)
        m = re.search(r"(\d+)\s*–º–∏–Ω", text)
        if h and m:
            result = f"{h.group(1)} —á {m.group(1)} –º–∏–Ω"
        elif m:
            result = f"{m.group(1)} –º–∏–Ω"
        elif h:
            result = f"{h.group(1)} —á"
        else:
            result = text
        return normalize_comment(result)

    def copy_result(self):
        # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        clipboard = QtWidgets.QApplication.clipboard()
        clipboard.setText(self.output.toPlainText())
        self.copy_btn.setText("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!")
        QtCore.QTimer.singleShot(2000, lambda: self.copy_btn.setText("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"))

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é GIF –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
        random_gif = random.choice(self.gif_list)
        movie = QtGui.QMovie(random_gif)

        # –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–¥ –ø–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        output_size = self.output.size()
        movie.setScaledSize(output_size)

        self.gif_label.setMovie(movie)
        self.gif_label.setFixedSize(output_size)  # –õ–µ–π–±–ª –∑–∞–Ω–∏–º–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.gif_label.setAlignment(QtCore.Qt.AlignCenter)
        self.gif_label.show()
        movie.start()

        # –°–∫—Ä—ã–≤–∞–µ–º GIF —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        QtCore.QTimer.singleShot(5000, lambda: self.gif_label.hide())

        # --- –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–∏–º–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ---
        current = self.stack.currentWidget()

        if current == self.common_container:
            self.order_input.clear()
            self.price_input.clear()
        elif current == self.multi_container:
            self.multi_calc.clear()
            self.multi_done.clear()
            self.multi_total.clear()
        elif current == self.payment_container:
            self.payment1_input.clear()
            self.payment2_input.clear()

        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.output.clear()


