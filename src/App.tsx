import { useState } from 'react';
import './App.css';
import { TEMPLATES } from './constants';
import {
  parsePriceLines,
  formatLine,
  sumRubleDigits,
  normalizeComment,
  parseTimeToMinutes,
  pluralWord,
  parsePaymentBlock,
} from './utils';
import InfoTab from './InfoTab';

type TemplateType = 'common' | 'multi' | 'payment' | 'inflow';

function App() {
  const [selectedTemplate, setSelectedTemplate] = useState<string>('–®–∞–±–ª–æ–Ω 1 (–†–í)');
  const [darkMode, setDarkMode] = useState(false);
  const [currentTab, setCurrentTab] = useState<'main' | 'info' | 'inflow'>('main');

  // –û–±—â–∏–µ –ø–æ–ª—è
  const [orderNumber, setOrderNumber] = useState('');
  const [priceData, setPriceData] = useState('');

  // –ü–æ–ª—è –¥–ª—è –º—É–ª—å—Ç–∏–∑–∞–∫–∞–∑–∞
  const [multiCalc, setMultiCalc] = useState('');
  const [multiDone, setMultiDone] = useState('');
  const [multiTotal, setMultiTotal] = useState('');

  // –ü–æ–ª—è –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–∞—Å—Ç—è–º–∏
  const [payment1, setPayment1] = useState('');
  const [payment2, setPayment2] = useState('');

  const [result, setResult] = useState('');
  const [showGif, setShowGif] = useState(false);
  const [copyButtonText, setCopyButtonText] = useState('üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
  const [currentGif, setCurrentGif] = useState('');

  // Fields for inflow tab
  const [inflowAmount, setInflowAmount] = useState('');
  const [inflowDate, setInflowDate] = useState('');
  const [inflowTime, setInflowTime] = useState('');

  const getCurrentTemplateType = (): TemplateType => {
    if (selectedTemplate.includes('–û—Ç–º–µ–Ω–∞ –±–∞—Ç—á–∞')) return 'multi';
    if (selectedTemplate.includes('–û–ø–ª–∞—Ç–∞ —á–∞—Å—Ç—è–º–∏')) return 'payment';
    if (selectedTemplate.includes('–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ')) return 'inflow';
    return 'common';
  };

  const generateResult = () => {
    try {
      const templateText = TEMPLATES[selectedTemplate as keyof typeof TEMPLATES];
      if (!templateText) {
        alert('–í—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const templateType = getCurrentTemplateType();

      if (templateType === 'multi') {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –º—É–ª—å—Ç–∏–∑–∞–∫–∞–∑–∞
        if (!multiCalc.trim()) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—á—ë—Ç–µ');
          return;
        }
        if (!multiDone.trim() || !multiTotal.trim()) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä—É—á–µ–Ω–∏–π');
          return;
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –º—É–ª—å—Ç–∏–∑–∞–∫–∞–∑–∞
        // Robust distance parsing: try to find a number + km/m anywhere first,
        // otherwise look for a value directly below the label "–†–∞—Å—á—ë—Ç–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ".
        let distance = '‚Äî';
        // tolerate formats like "4.60 –∫–º." or "4,60–∫–º" and trailing punctuation
        const dm = multiCalc.match(/([\d.,]+)\s*[\u00A0\s]*?(–∫–º|–º)\.?/i);
        if (dm) {
          const num = dm[1].trim();
          const unit = dm[2].trim();
          distance = `${num} ${unit}`;
        } else {
          const dm2 = multiCalc.match(
            /–†–∞—Å—á[–µ—ë]—Ç–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ[\s:\-]*[\r\n]+\s*([\d.,]+)\s*[\u00A0\s]*?(–∫–º|–º)\.?/i,
          );
          if (dm2) {
            const num = dm2[1].trim();
            const unit = dm2[2].trim();
            distance = `${num} ${unit}`;
          }
        }

        // Robust time parsing: capture the line after the label if necessary,
        // then normalize via parseTimeToMinutes.
        let timeRaw = '';
        const tmInline = multiCalc.match(/(\d+\s*—á(?:\.|)|\d+\s*–º–∏–Ω(?:\.|)|\d+\s*—Å–µ–∫(?:\.|))/i);
        if (tmInline) {
          // prefer a direct occurrence of hours/minutes/seconds
          timeRaw = tmInline[0];
        } else {
          const tm = multiCalc.match(/–†–∞—Å—á[–µ—ë]—Ç–Ω–æ–µ –≤—Ä–µ–º—è[\s:\-]*[\r\n]+\s*([^\r\n]+)/i);
          if (tm) timeRaw = tm[1].trim();
        }

        const timeParsed = normalizeComment(parseTimeToMinutes(timeRaw));

        const doneInt = parseInt(multiDone) || 0;
        const totalInt = parseInt(multiTotal) || 0;
        const doneWord = pluralWord(doneInt);

        const diff = totalInt - doneInt;
        let cancelText = '';
        if (diff === 1) {
          cancelText =
            '–û–¥–Ω–æ –∏–∑ –≤—Ä—É—á–µ–Ω–∏–π –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ, –ø–æ—ç—Ç–æ–º—É –æ–Ω–æ –Ω–µ –≤–æ—à–ª–æ –≤ —Ä–∞—Å—á—ë—Ç, –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å.';
        } else if (diff > 1) {
          cancelText =
            '–ù–µ—Å–∫–æ–ª—å–∫–æ –≤—Ä—É—á–µ–Ω–∏–π –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã, –ø–æ—ç—Ç–æ–º—É –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ —É—á—Ç–µ–Ω—ã –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ, –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å.';
        } else {
          cancelText = '–í—Å–µ –≤—Ä—É—á–µ–Ω–∏—è –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!';
        }

        const result = templateText
          .replace('{distance}', distance)
          .replace('{time}', timeParsed)
          .replace('{done_count}', doneInt.toString())
          .replace('{done_word}', doneWord)
          .replace('{total_count}', totalInt.toString())
          .replace('{cancel_text}', cancelText);

        setResult(result);
        return;
      }

      if (templateType === 'payment') {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–∞—Å—Ç—è–º–∏
        if (!payment1.trim() || !payment2.trim()) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π');
          return;
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–∞—Å—Ç—è–º–∏
        const { formattedDate: datetime1, amount: amount1 } = parsePaymentBlock(payment1);
        const { formattedDate: datetime2, amount: amount2 } = parsePaymentBlock(payment2);

        const result = templateText
          .replace('{amount1}', amount1)
          .replace('{amount2}', amount2)
          .replace('{datetime1}', datetime1)
          .replace('{datetime2}', datetime2);

        setResult(result);
        return;
      }

      // Special: inflow tab generates its own text (not template-based)
      if (templateType === 'inflow') {
        if (!inflowAmount.trim() || !inflowDate.trim() || !inflowTime.trim()) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å—É–º–º—É, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è');
          return;
        }
        const resultText = templateText
          .replace('{inflow_amount}', inflowAmount)
          .replace('{inflow_date}', inflowDate)
          .replace('{inflow_time}', inflowTime);
        setResult(resultText);
        return;
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
      if (!orderNumber.trim()) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞');
        return;
      }
      if (!priceData.trim()) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏');
        return;
      }

      // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
      const prices = parsePriceLines(priceData);
      const usedKeys = new Set<string>();
      const bodyLines: string[] = [];

      // –¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ Python main_tab.py
      const orderedFields = [
        ['–ü–æ–¥–∞—á–∞', '–ü–æ–¥–∞—á–∞'],
        ['–í—Ä–µ–º—è –≤ –ø—É—Ç–∏', '–í—Ä–µ–º—è –≤ –ø—É—Ç–∏'],
        ['–ö–∏–ª–æ–º–µ—Ç—Ä—ã –≤ –ø—É—Ç–∏', '–ö–∏–ª–æ–º–µ—Ç—Ä—ã –≤ –ø—É—Ç–∏'],
        ['–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Å–ø—Ä–æ—Å', '–ü–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç'],
        ['–û–∂–∏–¥–∞–Ω–∏–µ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è', '–û–∂–∏–¥–∞–Ω–∏–µ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è'],
        ['–û–∂–∏–¥–∞–Ω–∏–µ —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è', '–û–∂–∏–¥–∞–Ω–∏–µ —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è'],
        ['–î–æ–ø–ª–∞—Ç—ã', '–ë–æ–Ω—É—Å –∑–∞ –∑–∞–∫–∞–∑'],
        ['–¶–µ–Ω–∞ –æ—Ç–º–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞–º–∏', '–¶–µ–Ω–∞ –æ—Ç–º–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞–º–∏'],
        ['–ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä', '–ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä'],
      ];

      const extraFields = [
        '–ü–æ–ª—É—á–µ–Ω–∏–µ',
        '–î–∏—Å—Ç–∞–Ω—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞',
        '–¶–µ–Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–∞—á–∏',
        '–í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞',
        '–£—Å–ª—É–≥–∏ 1 –≥—Ä—É–∑—á–∏–∫–∞ (–∫—É–∑–æ–≤ S)',
        '–£—Å–ª—É–≥–∏ 1 –≥—Ä—É–∑—á–∏–∫–∞ (–∫—É–∑–æ–≤ L)',
        '–£—Å–ª—É–≥–∏ 2 –≥—Ä—É–∑—á–∏–∫–æ–≤ (–∫—É–∑–æ–≤ XL)',
        '–£—Å–ª—É–≥–∏ 1 –≥—Ä—É–∑—á–∏–∫–∞ (–∫—É–∑–æ–≤ M)',
        '–£—Å–ª—É–≥–∏ 2 –≥—Ä—É–∑—á–∏–∫–æ–≤ (–∫—É–∑–æ–≤ L)',
        '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–≥',
        '–ü–µ—Ä–µ–≤–µ—Å –±–æ–ª–µ–µ 20 –∫–≥',
        '–ü–µ—Ä–µ–≤–µ—Å –¥–æ 10 –∫–≥',
        '–ü–µ—Ä–µ–≤–µ—Å 10‚Äì20 –∫–≥',
        '–î–µ–≤—è—Ç—å –∫–æ—Ä–æ–±–æ–∫',
        '–£—Å–ø–µ—à–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –ø–æ—Å—ã–ª–∫–∏',
        '–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–∞—Ä–∫–æ–≤–∫–∏ (30 –º–∏–Ω—É—Ç)',
        '–¶–µ–Ω–∞ –æ—Ç–º–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞–º–∏',
        '–£—Å–ø–µ—à–Ω–æ–µ –≤—Ä—É—á–µ–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏',
        '–í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã',
      ];

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
      for (const [key, display] of orderedFields) {
        for (const k in prices) {
          if (k.startsWith(key) && !usedKeys.has(k)) {
            const [val, comment] = prices[k];
            bodyLines.push(formatLine(display, val, comment));
            usedKeys.add(k);
          }
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      for (const key of extraFields) {
        for (const k in prices) {
          if (k === key && !usedKeys.has(k)) {
            const [val, comment] = prices[k];
            const displayName = key === '–¶–µ–Ω–∞ –æ—Ç–º–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞–º–∏' ? '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –æ—Ç–º–µ–Ω—ã' : key;
            bodyLines.push(formatLine(displayName, val, comment));
            usedKeys.add(k);
          }
        }
      }

      // –¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ –∏–∑ Python
      const additionalServicesMap: { [key: string]: string } = {
        '–û—Ç –¥–≤–µ—Ä–∏ –¥–æ –¥–≤–µ—Ä–∏': '–û—Ç –¥–≤–µ—Ä–∏ –¥–æ –¥–≤–µ—Ä–∏',
        –ö—É–∑–æ–≤: '–†–∞–∑–º–µ—Ä –∫—É–∑–æ–≤–∞',
        –ì—Ä—É–∑—á–∏–∫–∏: '–ì—Ä—É–∑—á–∏–∫–∏',
        –¢–µ—Ä–º–æ–∫–æ—Ä–æ–±: '–¢–µ—Ä–º–æ–∫–æ—Ä–æ–±',
        '–¢—è–∂—ë–ª–∞—è –ø–æ—Å—ã–ª–∫–∞': '–¢—è–∂—ë–ª–∞—è –ø–æ—Å—ã–ª–∫–∞',
      };

      for (const key in prices) {
        if (key.includes('–ö—É–∑–æ–≤')) {
          const [val, comment] = prices[key];
          bodyLines.push(formatLine('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ ¬´–†–∞–∑–º–µ—Ä –∫—É–∑–æ–≤–∞¬ª', val, comment));
          usedKeys.add(key);
          continue;
        }
        for (const k in additionalServicesMap) {
          if (k.toLowerCase() !== '–∫—É–∑–æ–≤' && key.toLowerCase().includes(k.toLowerCase())) {
            const [val, comment] = prices[key];
            const name = `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ ¬´${additionalServicesMap[k]}¬ª`;
            bodyLines.push(formatLine(name, val, comment));
            usedKeys.add(key);
            break;
          }
        }
      }

      const bodyText = bodyLines.join('\n');
      const tempResult = templateText
        .replace('{order_number}', orderNumber)
        .replace('{body}', bodyText)
        .replace('{total}', 'TEMP_TOTAL');

      const calculatedTotal = sumRubleDigits(tempResult);
      const finalResult = tempResult.replace('TEMP_TOTAL', calculatedTotal);

      setResult(finalResult);
    } catch (error) {
      alert(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${error}`);
    }
  };

  const copyResult = () => {
    navigator.clipboard.writeText(result);
    setCopyButtonText('‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤–º–µ—Å—Ç–æ —ç–º–æ–¥–∂–∏
    setCurrentGif('/yandex-helper/medved.jpg');
    setShowGif(true);

    setTimeout(() => {
      setShowGif(false);
      setCopyButtonText('üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
    }, 2000);

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π
    const templateType = getCurrentTemplateType();
    if (templateType === 'common') {
      setOrderNumber('');
      setPriceData('');
    } else if (templateType === 'multi') {
      setMultiCalc('');
      setMultiDone('');
      setMultiTotal('');
    } else if (templateType === 'payment') {
      setPayment1('');
      setPayment2('');
    } else if (templateType === 'inflow') {
      setInflowAmount('');
      setInflowDate('');
      setInflowTime('');
    }
    setResult('');
  };

  const renderCommonForm = () => (
    <div className="form-section">
      <label>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</label>
      <input
        type="text"
        value={orderNumber}
        onChange={(e) => setOrderNumber(e.target.value)}
        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞..."
      />

      <label>–î–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:</label>
      <textarea
        value={priceData}
        onChange={(e) => setPriceData(e.target.value)}
        placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –∑–¥–µ—Å—å...&#10;–ü—Ä–∏–º–µ—Ä:&#10;–ü–æ–¥–∞—á–∞&#10;100 ‚ÇΩ (–∑–∞ 5 –º–∏–Ω)&#10;–í—Ä–µ–º—è –≤ –ø—É—Ç–∏&#10;200 ‚ÇΩ (–∑–∞ 15 –º–∏–Ω)"
        rows={6}
      />
    </div>
  );

  const renderMultiForm = () => (
    <div className="form-section">
      <label>–î–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—á—ë—Ç–µ:</label>
      <textarea
        value={multiCalc}
        onChange={(e) => setMultiCalc(e.target.value)}
        placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–∞:&#10;–†–∞—Å—á—ë—Ç–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ&#10;14.99 –∫–º.&#10;–†–∞—Å—á—ë—Ç–Ω–æ–µ –≤—Ä–µ–º—è&#10;43 –º–∏–Ω. 4 —Å–µ–∫."
        rows={4}
      />

      <input
        type="text"
        value={multiDone}
        onChange={(e) => setMultiDone(e.target.value)}
        placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –≤—Ä—É—á–µ–Ω–∏–π"
      />

      <input
        type="text"
        value={multiTotal}
        onChange={(e) => setMultiTotal(e.target.value)}
        placeholder="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä—É—á–µ–Ω–∏–π"
      />
    </div>
  );

  const renderPaymentForm = () => (
    <div className="form-section">
      <label>–ü–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:</label>
      <textarea
        value={payment1}
        onChange={(e) => setPayment1(e.target.value)}
        placeholder="26.09.2025, 21:19:41&#10;148 ‚ÇΩ"
        rows={2}
      />

      <label>–í—Ç–æ—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:</label>
      <textarea
        value={payment2}
        onChange={(e) => setPayment2(e.target.value)}
        placeholder="26.09.2025, 21:34:33&#10;209 ‚ÇΩ"
        rows={2}
      />
    </div>
  );

  const renderInflowForm = () => (
    <div className="form-section">
      <label>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ (—Ä—É–±):</label>
      <input
        type="text"
        value={inflowAmount}
        onChange={(e) => setInflowAmount(e.target.value)}
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 148"
      />

      <label>–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:</label>
      <input
        type="text"
        value={inflowDate}
        onChange={(e) => setInflowDate(e.target.value)}
        title="–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12 —Å–µ–Ω—Ç—è–±—Ä—è 2025)"
        placeholder="12 —Å–µ–Ω—Ç—è–±—Ä—è 2025"
      />

      <label>–í—Ä–µ–º—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:</label>
      <input
        type="time"
        value={inflowTime}
        onChange={(e) => setInflowTime(e.target.value)}
        title="–í—Ä–µ–º—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è"
        placeholder="—á—á:–º–º"
      />
    </div>
  );

  return (
    <div className={`app ${darkMode ? 'light' : 'dark'}`}>
      <header className="header">
        <div className="header-left">
          <img src="/yandex-helper/medved.jpg" alt="gay-medved" className="medved-png" />
          <h1>Yandex Fisting Helper</h1>
          <div className="tab-buttons">
            <button
              className={`tab-btn ${currentTab === 'main' ? 'active' : ''}`}
              onClick={() => setCurrentTab('main')}>
              üìù –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            </button>
            <button
              className={`tab-btn ${currentTab === 'info' ? 'active' : ''}`}
              onClick={() => setCurrentTab('info')}>
              –°–ø—Ä–∞–≤–∫–∞
            </button>
          </div>
        </div>
        <div className="header-right">
          <div>
            <h4>–ú–æ—Å–∫–≤–∞ –∏ –†–µ–≥–∏–æ–Ω—ã - 7% | –û—Å—Ç–∞–ª—å–Ω—ã–µ - 10% (–¢–µ—Ä–º–æ–∫–æ—Ä–æ–± –∫–æ–º—Å–∞)</h4>
          </div>
          {/* <div className="mini-ad mini-ad-left">
            <div className="ad-text">
              <a
                className="ad-link"
                href="https://t.me/+KyeTPTbdXbdmNzhi"
                target="_blank"
                rel="noopener noreferrer">
                –õ—É—á—à–∏–π —Ö—É–¥–æ–∂–Ω–∏–∫ –º—É–∂—Å–∫–æ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞
              </a>
            </div>
            <a
              href="https://t.me/+KyeTPTbdXbdmNzhi"
              title="–õ—É—á—à–∏–π —Ö—É–¥–æ–∂–Ω–∏–∫ –º—É–∂—Å–∫–æ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞"
              target="_blank"
              rel="noopener noreferrer">
              <img src="/yandex-helper/lemon.jpg" alt="femboy" />
            </a>
          </div> */}
          {/* <div className="mini-ad">
            <a
              className="ad-img-link"
              href="https://store.steampowered.com/app/3602290/FEMBOY_FUTA_HOUSE/"
              target="_blank"
              rel="noopener noreferrer">
              <img
                src="https://shared.fastly.steamstatic.com/store_item_assets/steam/apps/3602290/6385a10d2c3f15d06559ee06a59891960483708d/header_russian.jpg?t=1759777159"
                alt="Poster"
              />
            </a>
            <div className="ad-text">
              –ü–æ–º–æ–≥–ª–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ? –ö—É–ø–∏ –º–Ω–µ
              <br />
              <a
                className="ad-cta"
                href="https://store.steampowered.com/app/3602290/FEMBOY_FUTA_HOUSE/"
                target="_blank"
                rel="noopener noreferrer">
                Femboy Futa House
              </a>
            </div>
          </div> */}
          <button
            className="download-btn"
            onClick={async () => {
              try {
                // Query GitHub API for latest release assets
                const apiUrl =
                  'https://api.github.com/repos/Muhendalf-ru/yandex-helper/releases/latest';
                const res = await fetch(apiUrl, {
                  headers: { Accept: 'application/vnd.github+json' },
                });
                if (!res.ok) throw new Error(`GitHub API error ${res.status}`);
                const data = await res.json();
                // Find the first asset that ends with .exe (case-insensitive)
                const exeAsset = (data.assets || []).find(
                  (a: any) => a.name && a.name.toLowerCase().endsWith('.exe'),
                );
                if (exeAsset && exeAsset.browser_download_url) {
                  window.open(exeAsset.browser_download_url, '_blank', 'noopener');
                } else {
                  // fallback: open releases page
                  window.open(
                    'https://github.com/Muhendalf-ru/yandex-helper/releases/latest',
                    '_blank',
                    'noopener',
                  );
                }
              } catch (err) {
                console.error(err);
                window.open(
                  'https://github.com/Muhendalf-ru/yandex-helper/releases/latest',
                  '_blank',
                  'noopener',
                );
              }
            }}>
            ‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –Ω–∞ –ø–∫
          </button>

          <button className="theme-toggle" onClick={() => setDarkMode(!darkMode)}>
            {darkMode ? 'üåû' : 'üåô'}
          </button>
        </div>
      </header>

      {/* –ì–∞—Ä–ª–∞–Ω–¥a –ø–æ–¥ —Ö–µ–¥–µ—Ä–æ–º (–≤–æ –≤—Å—é —à–∏—Ä–∏–Ω—É) */}
      {/* <div className="garland-wrap">
        <img src="/yandex-helper/winter-balls.png" alt="–ì–∏—Ä–ª—è–Ω–¥–∞" className="garland" />
      </div> */}

      {/* –°–Ω–µ–∂–∏–Ω–∫–∏ (–ø–æ–≤–µ—Ä—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø–æ–¥ —à–∞–ø–∫–æ–π) */}
      {/* <div className="snowflakes" aria-hidden="true">
        <div className="snowflake">‚ùÑ</div>
        <div className="snowflake">‚ùÖ</div>
        <div className="snowflake">‚ùÜ</div>
        <div className="snowflake">‚ùÑ</div>
        <div className="snowflake">‚ùÖ</div>
        <div className="snowflake">‚ùÜ</div>
        <div className="snowflake">‚ùÑ</div>
        <div className="snowflake">‚ùÖ</div>
        <div className="snowflake">‚ùÜ</div>
        <div className="snowflake">‚ùÑ</div>
        <div className="snowflake">‚ùÖ</div>
        <div className="snowflake">‚ùÜ</div>
        <div className="snowflake">‚ùÑ</div>
        <div className="snowflake">‚ùÖ</div>
        <div className="snowflake">‚ùÜ</div>
      </div> */}
      {currentTab === 'main' ? (
        <main className="main" key="main">
          <div className="template-selector">
            <label>–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:</label>
            <select
              value={selectedTemplate}
              onChange={(e) => setSelectedTemplate(e.target.value)}
              aria-label="–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω">
              {Object.keys(TEMPLATES).map((template) => (
                <option key={template} value={template}>
                  {template}
                </option>
              ))}
            </select>
          </div>

          {getCurrentTemplateType() === 'common' ? (
            <div className="split-row">
              {renderCommonForm()}

              <div className="result-section">
                <label>–†–µ–∑—É–ª—å—Ç–∞—Ç:</label>
                <div className="result-container">
                  <textarea
                    value={result}
                    readOnly
                    className="result-textarea"
                    aria-label="–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
                  />
                  {showGif && (
                    <div className="gif-overlay">
                      <img src={currentGif} alt="medved" className="gif-image" />
                    </div>
                  )}
                </div>
              </div>
            </div>
          ) : getCurrentTemplateType() === 'multi' ? (
            <div className="split-row">
              {renderMultiForm()}
              <div className="result-section">
                <label>–†–µ–∑—É–ª—å—Ç–∞—Ç:</label>
                <div className="result-container">
                  <textarea
                    value={result}
                    readOnly
                    className="result-textarea"
                    aria-label="–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
                  />
                  {showGif && (
                    <div className="gif-overlay">
                      <img src={currentGif} alt="medved" className="gif-image" />
                    </div>
                  )}
                </div>
              </div>
            </div>
          ) : getCurrentTemplateType() === 'inflow' ? (
            <div className="split-row">
              {renderInflowForm()}
              <div className="result-section">
                <label>–†–µ–∑—É–ª—å—Ç–∞—Ç:</label>
                <div className="result-container">
                  <textarea
                    value={result}
                    readOnly
                    className="result-textarea"
                    aria-label="–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
                  />
                  {showGif && (
                    <div className="gif-overlay">
                      <img src={currentGif} alt="medved" className="gif-image" />
                    </div>
                  )}
                </div>
              </div>
            </div>
          ) : (
            <div className="split-row">
              {renderPaymentForm()}
              <div className="result-section">
                <label>–†–µ–∑—É–ª—å—Ç–∞—Ç:</label>
                <div className="result-container">
                  <textarea
                    value={result}
                    readOnly
                    className="result-textarea"
                    aria-label="–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
                  />
                  {showGif && (
                    <div className="gif-overlay">
                      <div className="gif-placeholder">{currentGif}</div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

          <button className="generate-btn" onClick={generateResult}>
            üîÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
          </button>

          <button className="copy-btn" onClick={copyResult}>
            {copyButtonText}
          </button>
        </main>
      ) : currentTab === 'inflow' ? (
        <main className="main" key="inflow">
          <div className="form-section">
            <label>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ (—Ä—É–±):</label>
            <input
              type="text"
              value={inflowAmount}
              onChange={(e) => setInflowAmount(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 148"
            />

            <label>–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:</label>
            <input
              type="date"
              value={inflowDate}
              onChange={(e) => setInflowDate(e.target.value)}
              title="–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è"
              placeholder="–≥–≥–≥–≥-–º–º-–¥–¥"
            />

            <label>–í—Ä–µ–º—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:</label>
            <input
              type="time"
              value={inflowTime}
              onChange={(e) => setInflowTime(e.target.value)}
              title="–í—Ä–µ–º—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è"
              placeholder="—á—á:–º–º"
            />
          </div>

          <div className="result-section">
            <label>–†–µ–∑—É–ª—å—Ç–∞—Ç:</label>
            <div className="result-container">
              <textarea
                value={result}
                readOnly
                className="result-textarea"
                aria-label="–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
              />
            </div>
          </div>

          <button className="generate-btn" onClick={generateResult}>
            üîÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
          </button>

          <button className="copy-btn" onClick={copyResult}>
            {copyButtonText}
          </button>
        </main>
      ) : (
        <InfoTab darkMode={darkMode} key="info" />
      )}
    </div>
  );
}

export default App;
